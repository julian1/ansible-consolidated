
# PG-Logical See,

# Using,        https://2ndquadrant.com/en/resources/pglogical/pglogical-docs/
# installation, https://2ndquadrant.com/en/resources/pglogical/pglogical-installation-instructions/
# postgres,     https://wiki.postgresql.org/wiki/Apt
# postgres docs -> use cases, https://www.postgresql.org/docs/devel/static/logical-replication.html
# upgrading     https://www.depesz.com/2016/11/08/major-version-upgrading-with-minimal-downtime/
#

# Api examples,

# show subscription status
# select * from pglogical.show_subscription_status('subscription1' ) ;

# run a replicated ddl command
# select pglogical.replicate_ddl_command( 'alter table public.x add column c int');

# resynchronize table after subscription status goes down
# select * from pglogical.alter_subscription_resynchronize_table('subscription1', 'x'  ) ;
# - probably could also just drop the table and call the same thing?

# create logical node,
# SELECT pglogical.create_node( node_name := 'provider1', dsn := 'host=pg-provider1.localnet port=5432 dbname=postgres');

# drop subscription
# SELECT pglogical.drop_subscription( subscription_name := 'subscription1'  ) ;

# drop node
# SELECT pglogical.drop_node( node_name := 'subscriber1' ) ;

# will create structure.
# SELECT pglogical.create_subscription( subscription_name := 'subscription1', provider_dsn := 'host=pg-provider1.localnet  port=5432 dbname=db password=postgres', synchronize_structure := true);

# specify which subscription sets to subscribe to
# SELECT pglogical.create_subscription( subscription_name := 'subscription1', provider_dsn := 'host=pg-provider1.localnet  port=5432 dbname=db password=postgres  ', synchronize_structure := true, replication_sets := ARRAY['default'] );

# show sync status of a table,
# select * from pglogical.show_subscription_table('subscription1', 'x'  ) ;

# drop and recreate provider default replication set, - useful to be able to drop a table
# select pglogical.drop_replication_set('default');
# select pglogical.create_replication_set('default');
# SELECT pglogical.replication_set_add_all_tables('default', ARRAY['public']);

# also functions to disable replication set, and add/remove

# Notes,
# - when creating the node on the subscriber, we must give it the password. not just when creating the subscription
# - provider tables must have primary keys to support update and delete
# - table creation ddl is left to the user, alternatively use synchronize_structure := true
# - ddl is not replicated (issue - for liquibase stuff). if a table structure is changed (add a column), then
#     there will be a conflict.


# Advantages,
# https://2ndquadrant.com/en/resources/pglogical/
# different versions of postgres
# very efficient - not based on triggers - instead processes the WALs using changeset extraction technique
# ddl or not
# different permissions structures, different sets of roles. eg. for a database dedicated to geoserver, it doesn't make sense to have all organisational roles on it.
# limit data - eg. just a couple of tables. such as aatams harvesters that are required for reporting.
# can set up, reporting queries, but keep them off of the geoserver specific database.
# supports multiple replication sets!!!

# part of BDR - bi directional replication



- hosts:
    - pg-provider1.localnet
    - pg-subscriber1.localnet
  vars_files:
    - ../vars/credentials.yml
  vars:
    - users:
      - { name: meteo, group: adm, pubkey: "{{meteo_pubkey}}", home_dir: /home/meteo }
      - { name: root,  group: adm, pubkey: "{{meteo_pubkey}}", home_dir: /root }
  roles:
    - jessie
    - timezone
    - locale
    - common
    - users
    - dotfiles
    - vim
  tasks:
    - apt: name=wget
    - apt: name=ca-certificates

    - copy:
        dest: /etc/apt/sources.list.d/2ndquadrant.list
        content: |
          # deployed by ansible!
          deb http://packages.2ndquadrant.com/pglogical/apt/ jessie-2ndquadrant main

    - copy:
        dest: /etc/apt/sources.list.d/pgdg.list
        content: |
          # deployed by ansible!
          deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main


    - shell: creates=/ansible/pglogical-done.txt chdir=/root {{item}}
      with_items:
        - wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        - wget --quiet -O - http://packages.2ndquadrant.com/pglogical/apt/AA7A6805.asc | sudo apt-key add -
        - apt-get update
        - touch /ansible/pglogical-done.txt


    - set_fact: version=9.6

    - apt: name=postgresql-{{version}}-pglogical


    # postgres already has replication rights, so not sure if need replication entry
    - copy:
        dest: "/etc/postgresql/{{version}}/main/pg_hba.conf"
        owner: postgres
        content: |
          # deployed by ansible!
          # hostssl  all  postgres  0.0.0.0/0  reject
          local       all         postgres                peer
          hostssl     all         all         0.0.0.0/0   md5
          hostssl     replication postgres    0.0.0.0/0   md5
      # notify: restart-postgres
      register: last_result

      # must restart postgres immediately before continuing
    - service: name=postgresql state=restarted
      when: last_result.changed


    - copy:
        dest: "/etc/postgresql/{{version}}/main/postgresql.conf"
        owner: postgres
        content: |
          # deployed by ansible!
          listen_addresses = '*'
          port = 5432
          max_connections = 100
          shared_buffers = '24MB'
          log_line_prefix = '%t %h %u %d %p %e'

          log_statement = all
          log_connections = true
          log_disconnections = true
          # log_min_error_statement = DEBUG5
          # log_min_messages = DEBUG5


          # For XA
          max_prepared_transactions = 10          # zero disables the feature

          datestyle = 'iso, mdy'
          default_text_search_config = 'pg_catalog.english'
          ssl = on
          data_directory = '/var/lib/postgresql/{{version}}/main'
          hba_file = '/etc/postgresql/{{version}}/main/pg_hba.conf'

          ssl_cert_file = '/etc/ssl/certs/ssl-cert-snakeoil.pem'
          ssl_key_file = '/etc/ssl/private/ssl-cert-snakeoil.key'


          # pglogical
          wal_level = 'logical'
          max_worker_processes = 10   # one per database needed on provider node
                                      # one per node needed on subscriber node
          max_replication_slots = 10  # one per node needed on provider node
          max_wal_senders = 10        # one per node needed on provider node
          shared_preload_libraries = 'pglogical'

      # notify: restart-postgres
      register: last_result


      # must restart postgres immediately before continuing
    - service: name=postgresql state=restarted
      when: last_result.changed




    # create ssl account for postgres superuser
    - shell: creates=/ansible/postgres-pass.txt chdir=/root {{item}}
      with_items:
        # Works, support ssl for postgres superuser
        - sudo -u postgres psql -c "alter user postgres unencrypted password 'postgres'"
        - touch /ansible/postgres-pass.txt


    ############################
    # provider definition,
    - shell: chdir=/root {{item}} creates=/ansible/provider1-created
      with_items:
        - sudo -u postgres psql -c "create database db owner postgres"
        - sudo -u postgres psql -d db -c "create extension pglogical"
        - sudo -u postgres psql -d db -c "SELECT pglogical.create_node( node_name := 'provider1', dsn := 'host=pg-provider1.localnet port=5432 dbname=db')"
        - sudo -u postgres psql -d db -c "create table x ( a int primary key )"
        - sudo -u postgres psql -d db -c "insert into  x( a) values (123);"
        - sudo -u postgres psql -d db -c "SELECT pglogical.replication_set_add_all_tables('default', ARRAY['public'])"
        - touch /ansible/provider1-created
      when: ansible_host == "pg-provider1.localnet"
      tags: whoot


    ############################
    # subscriber definition,
    # IMPORTANT password must be given at time create_node(), not just at create_subscription()
    - shell: creates=/ansible/subscription1-created {{item}}
      become: yes
      become_user: postgres
      with_items:
        - psql -c "create database db owner postgres"
        - psql -d db -c "create extension pglogical"
        - psql -d db -c "SELECT pglogical.create_node( node_name := 'subscriber1', dsn := 'host=pg-subscriber1.localnet port=5432 dbname=db password=postgres')"
        - psql -d db -c "SELECT pglogical.create_subscription( subscription_name := 'subscription1', provider_dsn := 'host=pg-provider1.localnet  port=5432 dbname=db password=postgres', synchronize_structure := true);"
        # - psql -d db -c "SELECT pglogical.create_subscription( subscription_name := 'subscription1', provider_dsn := 'host=pg-provider1.localnet  port=5432 dbname=db password=postgres', synchronize_structure := true, replication_sets := ARRAY['default'] );"
        - touch '/ansible/subscription1-created'

      when: ansible_host == "pg-subscriber1.localnet"
      tags: whoot


  handlers:
  - name: restart-postgres
    service: name=postgresql state=restarted



