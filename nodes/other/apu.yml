
# apu router with wireless ap, vlan trunking, dns/dhcp, multicast-routing, voip, nat, tftp, xmodem serial

  # Use static ip, since if dns goes wrong, we can end up provisioning 127.0.0.1
- hosts: 192.168.100.1
  vars_files:
    - ../vars/testing.yml
    - ../vars/credentials.yml
  vars:
    - hostname: apu
    - users:
      - { name: meteo, group: adm, pubkey: "{{meteo_pubkey}}" }
  roles:
    - debian
    - timezone
    - locale
    - hostname
    - common
    - meteo-dotfiles
    - ip-forwarding

  tasks:
    - apt: name=ntp             # network time
    - apt: name=tcpdump
    - apt: name=netstat-nat     # nat connections
    - apt: name=dnsutils        # dig, whois
    - apt: name=wireless-tools  # iwconfig - useful to check wlan0 state
    - apt: name=iw

    - apt: name=pciutils        # lspci
    - apt: name=usbutils        # lsusb
    - apt: name=ethtool

    - apt: name=firmware-ralink # backup AP
    - apt: name=haveged         # entropy for wifi crypto


    # TODO factor into a role if use more than here...
    # sensors
    - apt: name=lm-sensors
    - shell: creates=ansible-lm-sensors {{item}}
      with_items:
        - sensors-detect --auto
        - touch ansible-lm-sensors

    # WARNING: Nasty, after kernel upgrade, was
    # missing wlan0. Have to apt-get purge and
    # reinstall firmware-realtek as it
    # modifies initrd.img

    # Atheros AR9280 and wlan0 should be seen and can do iwlist scan
    - apt: name=firmware-realtek

    - apt: name=hostapd

    # hostapd.conf goes first since referred to by /etc/network/interfaces
    # AP primary
    - copy:
        dest: /etc/hostapd/hostapd-wlan0.conf
        content: |
          # deployed by ansible!
          interface=wlan0
          ssid=AP1
          hw_mode=g
          channel=7
          auth_algs=1
          wpa=2
          wpa_passphrase={{wpa_passphrase}}
          wpa_key_mgmt=WPA-PSK
          wpa_pairwise=TKIP
          rsn_pairwise=CCMP
      notify: restart-wlan0

    # AP2
    - copy:
        dest: /etc/hostapd/hostapd-wlan1.conf
        content: |
          # deployed by ansible!
          interface=wlan1
          ssid=AP2
          hw_mode=g
          channel=8
          # remove everything below for open AP
          auth_algs=1
          wpa=2
          wpa_passphrase={{wpa_passphrase}}
          wpa_key_mgmt=WPA-PSK
          wpa_pairwise=TKIP
          rsn_pairwise=CCMP
      notify: restart-wlan1

    - copy:
        dest: /etc/network/interfaces
        content: |
          # deployed by ansible!

          # loopback
          auto lo
          iface lo inet loopback

          # wan
          # allow-hotplug eth0
          #   iface eth0 inet dhcp

          # http://www.cyberciti.biz/tips/howto-configure-linux-virtual-local-area-network-vlan.html
          # just had to do /sbin/ifup eth0.100.100
          # VLAN = Third octet of IPv4 subnets, network identifier in IPv6 addresses.

          # vlan 100 switch management
          auto eth0.100
          iface eth0.100 inet static
            address 192.168.100.1
            netmask 255.255.255.0
            vlan-raw-device eth0

          # vlan 120 wan
          auto eth0.120
          iface eth0.120 inet dhcp
            vlan-raw-device eth0

          # vlan 200
          auto eth0.200
          iface eth0.200 inet static
            address 192.168.200.1
            netmask 255.255.255.0
            vlan-raw-device eth0

          # vlan 201
          auto eth0.201
          iface eth0.201 inet static
            address 192.168.201.1
            netmask 255.255.255.0
            vlan-raw-device eth0

          # router management
          # TODO do we need allow-hotplug?
          auto eth1
          iface eth1 inet static
            address 172.16.1.1
            netmask 255.255.255.0

          # AP primary
          auto wlan0
          iface wlan0 inet static
            hostapd /etc/hostapd/hostapd-wlan0.conf
            address 192.168.43.1
            netmask 255.255.255.0
            # gateway to 10.0.0.0 via dell-home
            # TODO A cleaner way to persist routing entries?
            post-up ip route add 10.0.0.0/8 via 192.168.43.14

          # AP 2
          auto wlan1
          iface wlan1 inet static
            hostapd /etc/hostapd/hostapd-wlan1.conf
            address 192.168.44.1
            netmask 255.255.255.0

      notify:
        # will these all be run together
        # TODO - restart networking generally?
        # TODO restart-eth0.100 and 200
        - restart-eth1
        # - restart-eth2
        - restart-wlan0

    - apt: name=dnsmasq

    - copy:
        # TODO change this filename!
        dest: /etc/dnsmasq.d/wifi
        content: |
          # deployed by ansible!
          # https://wiki.debian.org/HowTo/dnsmasq
          dhcp-ignore-names
          # only expands dns for dhcp entries, ie. not statically assigned or address entries (eg. apu)
          expand-hosts
          domain=localnet
          # log-queries
          # dhcp-ignore-names
          log-dhcp
          # no-hosts is required to avoid returning the 127.0.0.1 entry for apu in /etc/hosts
          no-hosts

          # vlan 100
          # management vlan for cisco switches and now router
          interface=eth0.100

          # vlan 100 is the most stable interface for assigning the router ip
          address=/apu/192.168.100.1
          address=/apu.localnet/192.168.100.1

          # cisco switches have static assignment on vlan100
          address=/cisco2/192.168.100.11
          address=/cisco2.localnet/192.168.100.11

          address=/cisco1/192.168.100.12
          address=/cisco1.localnet/192.168.100.12

          # vlan 200
          # Not unused
          interface=eth0.200
          dhcp-range=eth0.200,192.168.200.10,192.168.200.20,255.255.255.0,12h

          # Note, increased brother dhcp retries to 10 due slow switch startup

          # vlan 201
          interface=eth0.201
          dhcp-range=eth0.201,192.168.201.10,192.168.201.20,255.255.255.0,12h
          dhcp-host=78:a0:51:5c:75:53,budii,192.168.201.10
          dhcp-host=54:ab:3a:19:b6:d5,chromebox,192.168.201.12
          dhcp-host=00:80:77:34:55:96,brother,192.168.201.15
          dhcp-host=ac:9b:0a:91:6c:37,bravia,192.168.201.16
          dhcp-host=b8:ae:ed:7b:b5:b9,nuc,192.168.201.17
          dhcp-host=b8:2a:72:c9:fe:d2,dell-home-wired,192.168.201.19
          dhcp-host=00:04:13:37:1a:f1,snom,192.168.201.20

          # wireless
          interface=wlan0
          dhcp-range=wlan0,192.168.43.10,192.168.43.20,255.255.255.0,12h
          dhcp-host=40:a3:6b:c1:18:dc,omega,192.168.43.10
          dhcp-host=f8:16:54:1c:9e:90,dell-home,192.168.43.14
          dhcp-host=00:19:e3:10:53:89,imac,192.168.43.15
          dhcp-host=18:fe:34:d1:94:4d,esp,192.168.43.16
          dhcp-host=60:57:18:75:3b:cc,asus,192.168.43.17
          dhcp-host=ac:b5:7d:07:f7:d9,chromebox-wifi,192.168.43.18
          dhcp-host=18:fe:34:d2:3a:45,esp12f,192.168.43.19

          # wireless-secondary
          interface=wlan1
          dhcp-range=wlan1,192.168.44.10,192.168.44.20,255.255.255.0,12h
          dhcp-host=f8:16:54:1c:9e:90,dell-home,192.168.44.14
          dhcp-host=18:fe:34:d1:94:4d,esp,192.168.44.16
          dhcp-host=ac:b5:7d:07:f7:d9,chromebox-wifi,192.168.44.18

      notify: restart-dnsmasq

      # may need to restart wlan0 here? at least when install dnsmasq
    - apt: name=iptables-persistent

    - copy:
        dest: /etc/iptables-rules
        content: |
          # deployed by ansible!
          #####
          # filter
          iptables -t filter --flush
          iptables -t nat --flush
          iptables -t mangle --flush

          #####
          # input default policy
          iptables -P INPUT DROP

          # Incoming from WAN/eth0.120 (TODO state conntrack established, related in forward)
          # TODO remove the 1
          # http responses - required for apt-get update/upgrade
          iptables -I INPUT 1 -p tcp --sport 80 -j ACCEPT
          iptables -I INPUT 1 -p tcp --sport 443 -j ACCEPT
          # dns responses
          iptables -I INPUT 1 -p udp --sport 53 -j ACCEPT
          iptables -I INPUT 1 -p tcp --sport 53 -j ACCEPT
          # ping/icmp responses
          iptables -I INPUT 1 -p icmp -j ACCEPT

          # Internal
          # ssh
          iptables -I INPUT 1 ! -i eth0.120 -p tcp --dport 22 -j ACCEPT
          # tftp - port-range is inclusive
          iptables -I INPUT 1 ! -i eth0.120 -p udp --match multiport --dport 69,1024:1034 -j ACCEPT
          # dns
          iptables -I INPUT 1 ! -i eth0.120 -p udp --dport 53 -j ACCEPT
          iptables -I INPUT 1 ! -i eth0.120 -p tcp --dport 53 -j ACCEPT
          # dhcp
          iptables -I INPUT 1 ! -i eth0.120 -p udp --dport 67 -j ACCEPT
          # dlna
          iptables -I INPUT 1 ! -i eth0.120 -p tcp --dport 8200 -j ACCEPT
          iptables -I INPUT 1 ! -i eth0.120 -p udp --dport 1900 -j ACCEPT

          #####
          # nat
          # pre-routing
          # voip
          # http://serverfault.com/questions/594835/what-is-the-correct-way-to-open-a-range-of-ports-in-iptables
          # Good voip guide, note the comment to limit stp to smaller port range
          # http://whirlpool.net.au/wiki/iiNetPhone_asterisk

          # 15000: # 35000-44999
          # iptables -t nat -A PREROUTING -p udp --match multiport --dport 5060 -i eth0.120 -j DNAT --to 192.168.201.20
          # iptables -t nat -A PREROUTING -p tcp --match multiport --dport 5060 -i eth0.120 -j DNAT --to 192.168.201.20
          # iptables -t nat -A PREROUTING -p udp --match multiport --dport 15000:49999 -i eth0.120 -j DNAT --to 192.168.201.20

          # with nat punch-through it's not clear we even need all this
          # or at least tcp on 5060?
          # port forward may even confuse
          iptables -t nat -A PREROUTING -p udp -s 203.55.231.0/24 -i eth0.120 -j DNAT --to 192.168.201.20
          iptables -t nat -A PREROUTING -p tcp -s 203.55.231.0/24 -i eth0.120 -j DNAT --to 192.168.201.20

          # post-routing
          # private subnet nat
          iptables -t nat -A POSTROUTING -s 10.0.0.0/8     -o eth0.120 -j MASQUERADE
          iptables -t nat -A POSTROUTING -s 172.16.0.0/12  -o eth0.120 -j MASQUERADE
          iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -o eth0.120 -j MASQUERADE

          #####
          # mangle

      notify: reconfigure-iptables

    # multicast subnet routing. for example minidlna udp on 1900
    # Use, ip -s mroute to query status
    - apt: name=smcroute
    - copy:
        dest: /etc/smcroute/startup.sh
        mode: 0755
        content: |
          # deployed by ansible!
          sleep 1
          smcroute -a wlan0    0.0.0.0 239.255.255.250 eth0.201
          smcroute -a eth0.201 0.0.0.0 239.255.255.250 wlan0
      notify: restart-smcroute

    - apt: name=tftp
    - copy:
        dest: /etc/default/tftpd-hpa
        mode: 0644
        content: |
          # deployed by ansible!
          TFTP_USERNAME="tftp"
          TFTP_DIRECTORY="/srv/tftp"
          TFTP_ADDRESS="0.0.0.0:69"
          TFTP_OPTIONS="--secure --port-range 1024:1034"
      notify: restart-tftpd-hpa

      # /srv/tftp cannot just be owned by tftp. instead must have global read permissions
      # chown -R root:root /srv/tftp
      # chmod 755 $( find /srv/tftp -type d )
      # chmod 644 $( find /srv/tftp -type f )

    # xmodem protocol support over serial for switch firmware
    - apt: name=lrzsz

  handlers:
    - include: ../roles/common/handlers/main.yml

  # TODO move restart handlers from ./roles/common here
