
# apu router with wireless ap, vlan trunking, dns/dhcp, multicast-routing, voip, nat, tftp, xmodem serial

  # Use static ip, since if dns goes wrong, we can end up provisioning 127.0.0.1
- hosts: 192.168.100.1
#- hosts: apu.localnet
  vars_files:
    - ../../vars/credentials.yml
  vars:

  pre_tasks:
    - hostname: name=apu

    # root user
    - user: name=root shell=/bin/bash
    - authorized_key: user=root key="{{meteo_pubkey}}"

  roles:
    # - admin/apt/stretch
    - admin/apt/update
    - admin/timezone
    - admin/locale
    - admin/ip-forwarding

  tasks:
    - hostname: name=apu

    - apt: name=less
    - apt: name=net-tools            # ifconfig

    - apt: name=ntp             # network time
    - apt: name=tcpdump
    - apt: name=netstat-nat     # nat connections
    - apt: name=dnsutils        # dig, whois
    - apt: name=wireless-tools  # iwconfig - useful to check wlp4s0 state
    - apt: name=iw

    - apt: name=pciutils        # lspci
    - apt: name=usbutils        # lsusb
    - apt: name=ethtool

    #    - apt: name=firmware-ralink # backup AP
    - apt: name=haveged         # entropy for wifi crypto


    # TODO factor into a role if use more than here...
    # sensors
    - apt: name=lm-sensors
    - shell: creates=ansible-lm-sensors {{item}}
      with_items:
        - sensors-detect --auto
        - touch ansible-lm-sensors

    # WARNING: Nasty, after kernel upgrade, was
    # missing wlp4s0. Have to apt-get purge and
    # reinstall firmware-realtek as it
    # modifies initrd.img

    # Atheros AR9280 and wlp4s0 should be seen and can do iwlist scan
    # - apt: name=firmware-realtek

    - apt: name=hostapd

    # hostapd.conf goes first since referred to by /etc/network/interfaces
    # AP primary
    - copy:
        dest: /etc/hostapd/hostapd-wlp4s0.conf
        content: |
          # deployed by ansible!
          interface=wlp4s0
          ssid=AP1
          hw_mode=g
          channel=7
          auth_algs=1
          wpa=2
          wpa_passphrase={{wpa_passphrase}}
          wpa_key_mgmt=WPA-PSK
          wpa_pairwise=TKIP
          rsn_pairwise=CCMP
      notify: restart-wlp4s0

    # AP2
    - copy:
        dest: /etc/hostapd/hostapd-wlx0087325587cc.conf
        content: |
          # deployed by ansible!
          interface=wlx0087325587cc
          ssid=AP2
          hw_mode=g
          channel=8
          # remove everything below for open AP
          auth_algs=1
          wpa=2
          wpa_passphrase={{wpa_passphrase}}
          wpa_key_mgmt=WPA-PSK
          wpa_pairwise=TKIP
          rsn_pairwise=CCMP
      notify: restart-wlx0087325587cc

    - copy:
        dest: /etc/network/interfaces
        content: |
          # deployed by ansible!

          # loopback
          auto lo
          iface lo inet loopback

          # wan

          # http://www.cyberciti.biz/tips/howto-configure-linux-virtual-local-area-network-vlan.html
          # just had to do /sbin/ifup enp1s0.100.100
          # VLAN = Third octet of IPv4 subnets, network identifier in IPv6 addresses.

          # vlan 100 switch management
          auto enp1s0.100
          iface enp1s0.100 inet static
            address 192.168.100.1
            netmask 255.255.255.0
            vlan-raw-device enp1s0

          # vlan 120 wan
          auto enp1s0.120
          iface enp1s0.120 inet dhcp
            vlan-raw-device enp1s0

          # vlan 200
          auto enp1s0.200
          iface enp1s0.200 inet static
            address 192.168.200.1
            netmask 255.255.255.0
            vlan-raw-device enp1s0

          # vlan 201
          auto enp1s0.201
          iface enp1s0.201 inet static
            address 192.168.201.1
            netmask 255.255.255.0
            vlan-raw-device enp1s0

          # router management
          # TODO do we need allow-hotplug?
          #          auto eth1
          #          iface eth1 inet static
          #            address 172.16.1.1
          #            netmask 255.255.255.0

          # AP primary
          auto wlp4s0
          iface wlp4s0 inet static
            hostapd /etc/hostapd/hostapd-wlp4s0.conf
            address 192.168.43.1
            netmask 255.255.255.0
            # gateway to 10.0.0.0 via dell-home
            # TODO A cleaner way to persist routing entries?
            post-up ip route add 10.0.0.0/8 via 192.168.43.14

          # AP 2
          auto wlx0087325587cc
          iface wlx0087325587cc inet static
            hostapd /etc/hostapd/hostapd-wlx0087325587cc.conf
            address 192.168.44.1
            netmask 255.255.255.0

      notify:
        # will these all be run together
        # TODO - restart networking generally?
        # - restart-eth1
        # - restart-eth2

        # - restart-enp1s0  disable because kills conns...
        - restart-wlp4s0



    - copy:
        backup: yes
        dest: /etc/motd
        content: |
          # deployed by ansible!
      tags: sshd

    - copy:
        backup: yes
        dest: /etc/ssh/sshd_config
        content: |
          # deployed by ansible!
          Port 22
          # only listen on admin ip, for lan 100
          # ListenAddress 0.0.0.0
          ListenAddress 192.168.100.1

          Protocol 2
          HostKey /etc/ssh/ssh_host_rsa_key
          UsePrivilegeSeparation yes

          KeyRegenerationInterval 3600
          ServerKeyBits 1024

          SyslogFacility AUTH
          LogLevel INFO

          LoginGraceTime 30
          # if yes, allows password login - eg. for initial provisioning without keys...
          # PermitRootLogin yes

          # If this option is set to “without-password”, password authentication is disabled for root.
          PermitRootLogin without-password
          StrictModes yes

          RSAAuthentication yes
          PubkeyAuthentication yes

          IgnoreRhosts yes
          RhostsRSAAuthentication no
          HostbasedAuthentication no

          PermitEmptyPasswords no
          ChallengeResponseAuthentication no

          # JA the important bit - only allow keys
          PasswordAuthentication no

          # X11Forwarding yes
          # X11DisplayOffset 10
          PrintMotd no
          PrintLastLog yes
          TCPKeepAlive yes

          # banner is before login, motd is after
          # JA changed
          PrintMotd yes
          # Banner /etc/issue.net
          AcceptEnv LANG LC_*

          # no sftp
          # Subsystem sftp /usr/lib/openssh/sftp-server
          UsePAM yes

      notify: restart-sshd
      tags: sshd



      # may need to restart wlp4s0 here? at least when install dnsmasq
    - apt: name=iptables-persistent

    - copy:
        dest: /etc/iptables-rules
        content: |
          # deployed by ansible!
          #####
          # flush current rules
          iptables -t filter --flush
          iptables -t nat --flush
          iptables -t mangle --flush

          #####
          # policy
          iptables -P INPUT DROP
          iptables -P OUTPUT DROP
          iptables -P FORWARD ACCEPT

          # Incoming from WAN/enp1s0.120
          # But not NAT services
          # http for apt-get and upstream repositories
          iptables -A INPUT  -i enp1s0.120 -p tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT
          iptables -A OUTPUT -o enp1s0.120 -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
          iptables -A INPUT  -i enp1s0.120 -p tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT
          iptables -A OUTPUT -o enp1s0.120 -p tcp --dport 443 -m conntrack --ctstate NEW ESTABLISHED -j ACCEPT

          # upstream dns services
          iptables -A INPUT  -i enp1s0.120 -p udp --sport 53 -m conntrack --ctstate ESTABLISHED -j ACCEPT
          iptables -A OUTPUT -o enp1s0.120 -p udp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
          iptables -A INPUT  -i enp1s0.120 -p tcp --sport 53 -m conntrack --ctstate ESTABLISHED -j ACCEPT
          iptables -A OUTPUT -o enp1s0.120 -p tcp --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT

          # allow ping/icmp from here, eg. check 8.8.8.8 answers
          iptables -A INPUT  -i enp1s0.120 -p icmp           -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
          iptables -A OUTPUT -o enp1s0.120 -p icmp           -m conntrack --ctstate NEW,RELATED,ESTABLISHED -j ACCEPT

          # Internal routing for lans
          # But not NAT!
          # incoming ssh
          iptables -A INPUT  ! -i enp1s0.120 -p tcp --dport 22 -j ACCEPT
          iptables -A OUTPUT ! -o enp1s0.120 -p tcp --sport 22 -j ACCEPT

          # tftp - port-range is inclusive
          iptables -A INPUT  ! -i enp1s0.120 -p udp --match multiport --dport 69,1024:1034 -j ACCEPT
          iptables -A OUTPUT ! -o enp1s0.120 -p udp --match multiport --sport 69,1024:1034 -j ACCEPT

          # dns
          iptables -A INPUT  ! -i enp1s0.120 -p udp --dport 53 -j ACCEPT
          iptables -A OUTPUT ! -o enp1s0.120 -p udp --sport 53 -j ACCEPT
          iptables -A INPUT  ! -i enp1s0.120 -p tcp --dport 53 -j ACCEPT
          iptables -A OUTPUT ! -o enp1s0.120 -p tcp --sport 53 -j ACCEPT

          # dhcp
          iptables -A INPUT  ! -i enp1s0.120 -p udp --dport 67 -j ACCEPT
          iptables -A OUTPUT ! -o enp1s0.120 -p udp --sport 67 -j ACCEPT

          # dlna
          iptables -A INPUT  ! -i enp1s0.120 -p tcp --dport 8200 -j ACCEPT
          iptables -A OUTPUT ! -o enp1s0.120 -p tcp --sport 8200 -j ACCEPT
          iptables -A INPUT  ! -i enp1s0.120 -p udp --dport 1900 -j ACCEPT
          iptables -A OUTPUT ! -o enp1s0.120 -p udp --sport 1900 -j ACCEPT

          #####
          # nat
          # pre-routing
          # voip
          # http://serverfault.com/questions/594835/what-is-the-correct-way-to-open-a-range-of-ports-in-iptables
          # Good voip guide, note the comment to limit stp to smaller port range
          # http://whirlpool.net.au/wiki/iiNetPhone_asterisk

          # 15000: # 35000-44999
          # iptables -t nat -A PREROUTING -p udp --match multiport --dport 5060 -i enp1s0.120 -j DNAT --to 192.168.201.20
          # iptables -t nat -A PREROUTING -p tcp --match multiport --dport 5060 -i enp1s0.120 -j DNAT --to 192.168.201.20
          # iptables -t nat -A PREROUTING -p udp --match multiport --dport 15000:49999 -i enp1s0.120 -j DNAT --to 192.168.201.20

          # with nat punch-through it's not clear we even need all this
          # or at least tcp on 5060?
          # port forward may even confuse
          iptables -t nat -A PREROUTING -p udp -s 203.55.231.0/24 -i enp1s0.120 -j DNAT --to 192.168.201.20
          iptables -t nat -A PREROUTING -p tcp -s 203.55.231.0/24 -i enp1s0.120 -j DNAT --to 192.168.201.20

          # post-routing
          # private subnet nat
          iptables -t nat -A POSTROUTING -s 10.0.0.0/8     -o enp1s0.120 -j MASQUERADE
          iptables -t nat -A POSTROUTING -s 172.16.0.0/12  -o enp1s0.120 -j MASQUERADE
          iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -o enp1s0.120 -j MASQUERADE

          #####
          # mangle

      notify: reconfigure-iptables
      tags: iptables

    # multicast subnet routing. for example minidlna udp on 1900
    # Use, ip -s mroute to query status
    - apt: name=smcroute
    - copy:
        dest: /etc/smcroute/startup.sh
        mode: 0755
        content: |
          # deployed by ansible!
          sleep 1
          smcroute -a wlp4s0    0.0.0.0 239.255.255.250 enp1s0.201
          smcroute -a enp1s0.201 0.0.0.0 239.255.255.250 wlp4s0
      notify: restart-smcroute


#
#    - apt: name=tftp
#    - copy:
#        dest: /etc/default/tftpd-hpa
#        mode: 0644
#        content: |
#          # deployed by ansible!
#          TFTP_USERNAME="tftp"
#          TFTP_DIRECTORY="/srv/tftp"
#          TFTP_ADDRESS="0.0.0.0:69"
#          TFTP_OPTIONS="--secure --port-range 1024:1034"
#      notify: restart-tftpd-hpa
#
#      # /srv/tftp cannot just be owned by tftp. instead must have global read permissions
#      # chown -R root:root /srv/tftp
#      # chmod 755 $( find /srv/tftp -type d )
#      # chmod 644 $( find /srv/tftp -type f )
#
#    # xmodem protocol support over serial for switch firmware
#    - apt: name=lrzsz
#
#


      # bind
      # NOTE problem with rndc.key  solved by purge bind9 and reinstall
    - apt: name=bind9

    - file: path=/etc/bind/zones state=directory owner=root group=bind

    # named configuration
    - copy:
        dest: /etc/bind/named.conf.options
        backup: yes
        content: |
          # deployed by ansible!
          options {
            directory "/var/cache/bind";
            forwarders {
              8.8.8.8;
            };
            dnssec-validation auto;
            auth-nxdomain no;    # conform to RFC1035
            listen-on-v6 { any; };
          };
      notify: restart-bind

    # zones
    - copy:
        dest: /etc/bind/named.conf.local
        backup: yes
        content: |
          # deployed by ansible!

          zone "localnet" {
            type master;
            file "/etc/bind/zones/localnet.db";
          };
      notify: restart-bind


    # localnet zone
    - copy:
        dest: /etc/bind/zones/localnet.db
        owner: root
        group: bind
        content: |
          ; deployed by ansible!
          ;
          $TTL 60
          $ORIGIN localnet.
          @             IN SOA ns1 mail ( 2001062501 21600 3600 604800 86400 )
          @             IN NS ns1
          @             IN NS ns2
          @             IN A 192.168.1.1
          ; @           IN AAAA ::1
          @             IN MX 10 192.168.1.1

          ; vlan 100
          apu           IN A 192.168.100.1
          ; these are around the wrong way...
          cisco1        IN A 192.168.100.11
          cisco2        IN A 192.168.100.12

          ; vlan 200 - not used

          ; vlan 201
          budii         IN A 192.168.201.10
          chromebox     IN A 192.168.201.12
          brother       IN A 192.168.201.15
          bravia        IN A 192.168.201.16
          nuc           IN A 192.168.201.17
          dell-home-wired IN A 192.168.201.19
          snom          IN A 192.168.201.20

          ; wireless  wlp4s0
          omega         IN A 192.168.43.10
          dell-home     IN A 192.168.43.14
          imac          IN A 192.168.43.15
          esp           IN A 192.168.43.16
          asus          IN A 192.168.43.17
          chromebox-wifi IN A 192.168.43.18
          esp12f        IN A 192.168.43.19

          ; wireless  wlx0087325587cc
          dell-home     IN A 192.168.44.14
          esp           IN A 192.168.44.16
          chromebox-wifi IN A 192.168.44.18

          mail          IN A 192.168.201.1
          ns1           IN A 192.168.1.1
          ns2           IN A 192.168.1.2
      notify: restart-bind
      tags: bind


    # dhcp
    - apt: name=isc-dhcp-server

    - copy:
        dest: /etc/default/isc-dhcp-server
        owner: root
        group: root
        backup: yes
        content: |
          # deployed by ansible!
          #Separate multiple interfaces with spaces, e.g. “enp1s0 eth1".
          INTERFACESv4="enp1s0.201 wlp4s0 wlx0087325587cc"
          INTERFACESv6=""
      notify: restart-dhcp

    - copy:
        dest: /etc/dhcp/dhcpd.conf
        owner: root
        group: root
        backup: yes
        content: |
          # deployed by ansible!

          authoritative;
          option domain-name "localnet";
          # option domain-name-servers 131.217.38.36, 8.8.4.4;
          # TODO don't think we need this... because we are explicit
          option domain-name-servers 10.1.1.1;

          # Set up our desired subnet:
          # http://jodies.de/ipcalc?host=10.1.1.0&mask1=24&mask2=
          subnet 192.168.201.0 netmask 255.255.255.0 {
              interface "enp1s0.201";
              range 192.168.201.1  192.168.201.127;
              option subnet-mask 255.255.255.0;
              option broadcast-address 192.168.201.255;
              option routers 192.168.201.1;
              option domain-name-servers 192.168.201.1;

              host budii        { hardware ethernet 78:a0:51:5c:75:53; fixed-address 192.168.201.10; }
              host chromebox    { hardware ethernet 54:ab:3a:19:b6:d5; fixed-address 192.168.201.12; }
              host brother      { hardware ethernet 00:80:77:34:55:96; fixed-address 192.168.201.15; }
              host bravia       { hardware ethernet ac:9b:0a:91:6c:37; fixed-address 192.168.201.16; }
              host nuc          { hardware ethernet b8:ae:ed:7b:b5:b9; fixed-address 192.168.201.17; }
              host dell-home-wired { hardware ethernet b8:2a:72:c9:fe:d2; fixed-address 192.168.201.19; }
              host snom         { hardware ethernet 00:04:13:37:1a:f1; fixed-address 192.168.201.20; }
          }

          subnet 192.168.43.0 netmask 255.255.255.0 {

              interface "wlp4s0";

              range 192.168.43.1  192.168.43.127;
              option subnet-mask 255.255.255.0;
              option broadcast-address 192.168.43.255;
              option routers 192.168.43.1;
              option domain-name-servers 192.168.43.1;

              host omega        { hardware ethernet 40:a3:6b:c1:18:dc; fixed-address 192.168.43.10; }
              host dell-home    { hardware ethernet f8:16:54:1c:9e:90; fixed-address 192.168.43.14; }
              host imac         { hardware ethernet 00:19:e3:10:53:89; fixed-address 192.168.43.15; }
              host esp          { hardware ethernet 18:fe:34:d1:94:4d; fixed-address 192.168.43.16; }
              host asus         { hardware ethernet 60:57:18:75:3b:cc; fixed-address 192.168.43.17; }
              host chromebox-wifi { hardware ethernet ac:b5:7d:07:f7:d9; fixed-address 192.168.43.18; }
              host esp12f       { hardware ethernet 18:fe:34:d2:3a:45; fixed-address 192.168.43.19; }
          }

          subnet 192.168.44.0 netmask 255.255.255.0 {
              interface "wlx0087325587cc";

              range 192.168.44.1  192.168.44.127;
              option subnet-mask 255.255.255.0;
              option broadcast-address 192.168.44.255;
              option routers 192.168.44.1;
              option domain-name-servers 192.168.44.1;

              host dell-home2   { hardware ethernet f8:16:54:1c:9e:90; fixed-address 192.168.44.14; }
          }


          default-lease-time 600;
          max-lease-time 7200;
          # Show that we want to be the only DHCP server in this network:
          authoritative;
      notify: restart-dhcp
      tags: dhcp




  handlers:
    - name: restart-enp1s0
      command: sh -c "/sbin/ifdown enp1s0 && /sbin/ifup enp1s0"

    # - name: restart-eth1
    #  command: sh -c "/sbin/ifdown eth1 && /sbin/ifup eth1"


    - name: restart-wlp4s0
      command: sh -c "/sbin/ifdown wlp4s0 && sleep 1 && /sbin/ifup wlp4s0"

    - name: restart-wlx0087325587cc
      command: sh -c "/sbin/ifdown wlx0087325587cc && sleep 1 && /sbin/ifup wlx0087325587cc"


    - name: restart-smcroute
      service: name=smcroute state=restarted

    - name: restart-tftpd-hpa
      service: name=tftpd-hpa state=restarted

    - name: reconfigure-iptables
      command: "{{item}}"
      with_items:
        - sh /etc/iptables-rules
        - dpkg-reconfigure --frontend noninteractive iptables-persistent

    - name: restart-sshd
      service: name=ssh state=restarted

    # - name: reboot
    #  command: /sbin/reboot

    - name: restart-bind
      service: name=bind9 state=restarted

    - name: restart-dhcp
      service: name=isc-dhcp-server state=restarted


