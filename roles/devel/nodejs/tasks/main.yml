
  # 6.11.5 and 8.9.4  are lts releases. patch number is updated.
  # it's ok to install as root - when on a vps, or in a container.
  # https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz
  # https://nodejs.org/dist/v8.11.1/node-v8.11.1-linux-x64.tar.xz  -- lts

  - get_url:
      url: "https://nodejs.org/dist/{{version}}/node-{{version}}-linux-x64.tar.xz"
      dest: "{{deploy_path}}/node-{{version}}-linux-x64.tar.xz"
      mode: 0644


  - unarchive:
      src: "{{deploy_path}}/node-{{version}}-linux-x64.tar.xz"
      dest: "{{deploy_path}}"
      remote_src: True


  - copy:
      dest: "{{deploy_path}}/node.inc"
      content: |
        # deployed by ansible!

        # PATH="$HOME/node-v8.11.1-linux-x64/bin:$HOME/node_modules/yarn/bin/:$PATH"
        PATH="{{deploy_path}}/node-{{version}}-linux-x64/bin:$PATH"
        export PATH

    tags: path 





#################

# OLD on Debian
#  - apt: name=nodejs                        # node/nodejs v4.2.4
#  - npm: name=npm state=latest global=true  # 2.14.12 -> 3.5.3

      #
  # https://nodejs.org/en/download/package-manager/


#################
#
#  - shell: |
#      curl -sL https://deb.nodesource.com/setup_4.x | bash -
#      creates=/etc/apt/sources.list.d/nodesource.list



#################

#  - apt: name=npm
  # Don't need when using deb.nodesource.com ...
  # debian legacy workaround
  # - file: src=/usr/bin/nodejs dest=/usr/bin/node state=link

  #  - apt: name=npm
  # upgrade to latest npm 3.5.2
  # - npm: name=npm global=true

  # upgrade/ensure using nodejs 4.2.4. 4.2.0 is the LTS
  # - npm: name=nodejs global=true


# RUN npm install -g gulp

## dont really need this.
# express
# RUN npm install express body-parser

# websockets
# RUN apt-get -y install python g++
# RUN npm install ws


