
## maybe change name vpc or virutal-cloud etc...

# services for container hosting, and management
# ethernet bridging, nat, dhcp, dns, iptables, centralized logging, local resolv.conf


# TODO ordinary permisson on creation of TUN dnevice.
# https://unix.stackexchange.com/questions/243382/making-dev-net-tun-available-to-qemu/243405


  #############################
  # bridge

  - apt: name=bridge-utils

  # insertafter: "<body>"
  - blockinfile:
      dest: /etc/network/interfaces
      marker: "# {mark} ansible bridge"
      content: |
        auto br0
        iface br0 inet static
          address 10.3.0.1
          netmask 255.255.255.0
          bridge_ports dummy0
          bridge_stp off
          bridge_fd 0
    notify: restart-br0


  #####
  # Support bridge addif for qemu
  # tunctl from uml-utilities only needed for permissions, not strictly needed
  - apt: name=qemu-kvm
  - apt: name=uml-utilities

  - copy:
      dest: /etc/qemu-ifup
      mode: 0755
      content: |
        #!/bin/sh -x
        # deployed by ansible
        echo "i am $(whoami)"
        switch=br0
        if [ -n "$1" ];then
            # has to be run as root...
            # tunctl -u `whoami` -t $1
            ip link set $1 up
            sleep 0.5s
            brctl addif $switch $1
            exit 0
        else
            ECHO "Error: no interface specified"
            exit 1
        fi

  - copy:
      dest: /etc/qemu-ifdown
      mode: 0755
      content: |
        #!/bin/sh -x
        # deployed by ansible
        switch=br0
        if [ -n "$1" ];then
            # permissions...
            brctl delif $switch $1
            ip link delete $1
            exit 0
        else
            echo "Error: no interface specified"
            exit 1
        fi



  #############################
  # dhcp
  - apt: name=isc-dhcp-server

  - copy:
      dest: /etc/default/isc-dhcp-server
      owner: root
      group: root
      # backup: yes
      content: |
        # deployed by ansible!
        #Separate multiple interfaces with spaces, e.g. â€œeth0 eth1".
        INTERFACESv4="br0"
        INTERFACESv6=""
    notify: restart-dhcp
    tags: dhcp

  # see apu, config to change logging...

  # systemctl enable isc-dhcp-server
  # systemctl start isc-dhcp-server
  # /usr/sbin/dhcpd -4 -q -cf /etc/dhcp/dhcpd.conf br0

  - copy:
      dest: /etc/dhcp/dhcpd.conf
      owner: root
      group: root
      # backup: yes
      content: |
        # deployed by ansible!

        # Show that we want to be the only DHCP server in this network:
        authoritative;

        option domain-name "localnet2";
        # option domain-name-servers 131.217.38.36, 8.8.4.4;
        # TODO don't think we need this... because we are explicit

        # default-lease-time 600; 10 mins
        default-lease-time 3600;  # one hour
        max-lease-time 7200;

        # requires corresponding entry in /etc/rsyslog.conf
        log-facility local7;

        # dhcp push routes.
        # https://gauvain.pocentek.net/docs/dhcpd-push-routes/
        # https://ercpe.de/blog/pushing-static-routes-with-isc-dhcp-server
        # defines the type of data used to send the routing informations
        option classless-routes code 121 = array of unsigned integer 8;

        # Set up our desired subnet:
        # http://jodies.de/ipcalc?host=10.1.1.0&mask1=24&mask2=
        subnet 10.3.0.0 netmask 255.255.255.0 {
            interface "br0";

            range 10.3.0.30  10.3.0.40;

            option subnet-mask 255.255.255.0;
            option broadcast-address 10.3.0.255;
            option routers 10.3.0.1;
            # option domain-name-servers 208.67.222.222;  # opendns
            option domain-name-servers 10.3.0.1;          # locally hosted bind

            # push gateways for subnets when default route is openvpn
            # option classless-routes 16, 192,168,    192,168,201,1,
            #                        24, 10,4,0,     192,168,201,1;

            host kvm-inst     { hardware ethernet 00:01:04:1b:2C:1B; fixed-address 10.3.0.10; }

            # nspawn, chroots
            host stretch      { hardware ethernet 00:01:02:03:04:08; fixed-address 10.3.0.8; }
            host postgres     { hardware ethernet 00:01:02:03:04:12; fixed-address 10.3.0.12; }
            host devel01      { hardware ethernet 00:01:02:03:04:11; fixed-address 10.3.0.11; }
            host devel02      { hardware ethernet 00:01:02:03:04:14; fixed-address 10.3.0.14; }
            host devel03      { hardware ethernet 00:01:02:03:04:15; fixed-address 10.3.0.15; }
            host devel04      { hardware ethernet 00:01:02:03:04:16; fixed-address 10.3.0.16; }
            host haproxy      { hardware ethernet 00:01:02:03:04:17; fixed-address 10.3.0.17; }
            host devel05      { hardware ethernet 00:01:02:03:04:18; fixed-address 10.3.0.18; }

            # haproxy       IN A  10.3.0.17
        }

    notify: restart-dhcp
    tags: dhcp


  # enable

  # NOTE, also requires, ./roles/admin/nodnsupdate/tasks/main.yml in rolelist

  # named options and configuration
  - copy:
      dest: /etc/resolv.conf
      # backup: yes
      content: |
        # deployed by ansible!

        # search, try resolution for localnets
        # https://superuser.com/questions/570082/in-etc-resolv-conf-what-exactly-does-the-search-configuration-option-do
        #   - can have up to six entries...
        search localnet localnet2

        # WARNING do not change!
        # Use /etc/bind/named.conf.options instead and restart bind9
        nameserver 10.3.0.1

    tags: bind



  #############################
  # bind/dns


  # having a local dns, as well as router dns is handled by zone specific forwarding.

  # ntp time, or else, 'broken trust chain resolving'
  # https://www.centos.org/forums/viewtopic.php?t=49614
  - apt: name=ntp             # network time

  # note,  can reload config with 'rndc reload'
  # NOTE problem with rndc.key  solved by purge bind9 and reinstall
  - apt: name=bind9

  - file: path=/etc/bind/zones state=directory owner=root group=bind

  # named options and configuration
  - copy:
      dest: /etc/bind/named.conf.options
      # backup: yes
      content: |
        # deployed by ansible!

        logging {

          channel default_syslog {
                  print-time yes;
                  print-category yes;
                  print-severity yes;
                  syslog local6;
                  severity info;
          };

          // is anything usinig this by default?
          channel default_debug {
                  print-time yes;
                  print-category yes;
                  print-severity yes;
                  syslog local6;
                  severity dynamic;
          };

          channel default_stderr {
            null;
          };

          channel null {
             // toss anything sent to this channel
             null;
          };

          category queries { default_syslog; };
          category query-errors { default_syslog; };

          // why doesn't this work - to redirect everything????
          category unmatched { default_syslog; };
          category default { default_syslog; };
        };



        options {
          directory "/var/cache/bind";

          # catchall forwarder
          forwarders {
            # for openvpn - must be opendns or google etc .
            # 208.67.222.222;
            # for non openvpn - must be local router - 192.168.43.1
            192.168.43.1;
          };

          # https://stackoverflow.com/questions/13342003/ns-got-insecure-response-parent-indicates-it-should-be-secure
          dnssec-enable no;
          dnssec-validation no;

          # dnssec-validation auto;
          auth-nxdomain no;    # conform to RFC1035

          # listen-on-v6 { any; };
          listen-on-v6 { none; };

          # listen-on port 53 { 127.0.0.1; 223.1.2.1; };

          # IMPORTANT - very useful for overriding a specific host on a domain, but without needing to be
          # the authoritative ns for the zone, which requires a complete set of records for all nodes
          response-policy { zone "rpz"; };

          # notify other dns
          notify no;
        };

    notify: restart-bind
    tags: bind


  # zones
  - copy:
      dest: /etc/bind/named.conf.local
      # backup: yes
      content: |
        # deployed by ansible!

        # zone specific forwarding!!!

        # forward localnet to router
        zone "localnet" IN {
            type forward;
            forwarders {
                192.168.43.1;
            };
        };

        # serve localnet2
        zone "localnet2" {
          type master;
          file "/etc/bind/zones/localnet2.db";
        };

        # response policy zone
        # see, https://www.redpill-linpro.com/sysadvent/2015/12/08/dns-rpz.html
        zone "rpz" {
          type master;
          file "/etc/bind/zones/rpz.db";
        };

    notify: restart-bind
    tags: bind


  # rpz zone
  - copy:
      dest: /etc/bind/zones/rpz.db
      owner: root
      group: bind
      content: |
        ; deployed by ansible!
        ;
        ;  IMPORTANT - very useful for overriding a specific host on a domain, but without needing to be
        ;  the authoritative ns for the zone, which requires a complete set of records for all nodes


        $TTL 60
        @            IN    SOA  localhost. root.localhost.  (
                                  2015112501   ; serial
                                  1h           ; refresh
                                  30m          ; retry
                                  1w           ; expiry
                                  30m)         ; minimum
                           IN     NS    ns1.
                           IN     NS    ns2.

        ; Enable/disable here...
        test.com  A     127.0.0.1

    notify: restart-bind
    tags: bind


  # localnet2 zone
  - copy:
      dest: /etc/bind/zones/localnet2.db
      owner: root
      group: bind
      content: |
        ; deployed by ansible!
        ;
        $TTL 60
        $ORIGIN localnet2.
        @             IN SOA ns1 mail ( 2001062501 21600 3600 604800 86400 )
        @             IN NS ns1
        ; @             IN NS ns2
        @             IN A 10.3.0.1
        ; @           IN AAAA ::1
        @             IN MX 10 10.3.0.1

        ; nspawn
        stretch       IN A  10.3.0.8
        postgres      IN A  10.3.0.12
        devel01       IN A  10.3.0.11
        devel02       IN A  10.3.0.14
        devel03       IN A  10.3.0.15
        devel04       IN A  10.3.0.16
        haproxy       IN A  10.3.0.17
        devel05       IN A  10.3.0.18

        mail          IN A  10.3.0.1
        ns1           IN A  10.3.0.1
        ; ns2         IN A  10.3.0.1
    notify: restart-bind
    tags: bind



  #############################
  # firewall, nat
  # must be integrated whatever else is needed on the host
  # unless there was a way to apply this on the forked network namespace...

  - apt: name=iptables-persistent


  - copy:
      dest: /etc/iptables-rules
      content: |
        # deployed by ansible!
        #####
        # flush current chain rules
        iptables -t filter --flush
        iptables -t nat --flush

        #############
        # NAT
        # for openvpn
        # iptables -t nat -A POSTROUTING -s 10.3.0.0/24 -o tun0  -j MASQUERADE

        # for non-openvpn - this nodes, main wan interface
        iptables -t nat -A POSTROUTING -s 10.3.0.0/24 -o wlan0 -j MASQUERADE

        #############
        # input/output with this node.

        # no restrictions
        iptables -P INPUT  ACCEPT
        iptables -P OUTPUT ACCEPT

        # logging example, ip tables
        iptables -A INPUT  -p udp --dport 67 -j LOG --log-prefix "IPTABLES: "
        iptables -A OUTPUT -p udp --sport 67 -j LOG --log-prefix "IPTABLES: "
        iptables -A INPUT  -p udp --dport 68 -j LOG --log-prefix "IPTABLES: "
        iptables -A OUTPUT -p udp --sport 68 -j LOG --log-prefix "IPTABLES: "

        #############
        # forward

        iptables -P FORWARD DROP

        # dhcp / dns - only with the node. input/output not a forward entry
        # anything here is also subject to apu rules for 5520

        # ping everwhere across
        iptables -A FORWARD -p icmp --icmp-type 8 -j ACCEPT
        iptables -A FORWARD -p icmp --icmp-type 0 -j ACCEPT

        # we don't need to ssh out...
        # Note, won't work for nodes, using host routing exceptions to openvpn tunnel gateway
        # iptables -A FORWARD -p tcp --dport 22 -j ACCEPT
        # iptables -A FORWARD -p tcp --sport 22 -j ACCEPT

        # http - for apt-get etc....
        iptables -A FORWARD -p tcp --dport 80 -j ACCEPT
        iptables -A FORWARD -p tcp --sport 80 -j ACCEPT

        iptables -A FORWARD -p tcp --dport 443 -j ACCEPT
        iptables -A FORWARD -p tcp --sport 443 -j ACCEPT

        # ntp
        iptables -A FORWARD -p udp --dport 123 -j ACCEPT
        iptables -A FORWARD -p udp --sport 123 -j ACCEPT

        # 3000 web-services
        iptables -A FORWARD -p tcp --dport 3000 -j ACCEPT
        iptables -A FORWARD -p tcp --sport 3000 -j ACCEPT

    notify: reconfigure-iptables
    tags: iptables




  # configure rsyslog to move dhcp logging out of syslog
  # See, http://shallowsky.com/blog/linux/rsyslog-conf-tutorial.html
  - copy:
      dest: /etc/rsyslog.d/00-include.conf
      owner: root
      group: root
      content: |
        # deployed by ansible!

        # this belongs to the modules section, because it should only be done once.
        # but overriding here does work,
        # this is sufficient to open the port
        # rsyslog is traditional udp 514. note that port 514 is also rsh when tcp. issue for tshark.
        module(load="imtcp")
        input(type="imtcp" port="514")

        # very basic logging authorization, based on peer ip
        $AllowedSender TCP, 10.3.0.0/24


        # JA overriding in this include works correctly
        # $template TraditionalFormatWithPRI,"%timegenerated% %pri-text%: %HOSTNAME% %syslogtag% %msg%\n"
        $template TraditionalFormatWithPRI,"%timegenerated% %HOSTNAME% %pri-text%: %syslogtag% %msg%\n"
        $ActionFileDefaultTemplate TraditionalFormatWithPRI

        # iptables
        :msg, contains, "IPTABLES"      /var/log/iptables.log
        & stop

        # named/bind9
        local6.*                        /var/log/named.log
        & stop

        # work around named which doesn't always route to configured locale6 facility
        if $programname == 'named' then /var/log/named.log
        & stop

        # dhcp
        local7.*                        /var/log/dhcpd.log
        & stop

        # cron
        cron.*                          /var/log/cron.log
        & stop

    notify: restart-rsyslog
    tags: rsyslog


  # logrotate
  # https://www.networkworld.com/article/3218728/linux/how-log-rotation-works-with-logrotate.html
  - copy:
      dest: /etc/logrotate.d/00-include
      owner: root
      group: root
      content: |
        # deployed by ansible!

        /var/log/iptables.log
        /var/log/named.log
        /var/log/dhcpd.log
        {
          rotate 7
          daily
          missingok
          notifempty
          delaycompress
          compress
        }

    tags: rsyslog

# note both router and vpn do egress nat'ing.
# we should be able to route from vpn node with a routing entry for 10.3.0.0/24 via 10.8.0.6 on vpn node
# or with a routing entry for 10.3.0.0/24 via 192.168.43.6 from router

# also could consider source routing...

# what's next? containers? bind. windows/osx.  gpu pass-through.

