
# https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04

# stretch
# https://linuxconfig.org/how-to-setup-a-vpn-with-openvpn-on-debian-9-stretch-linux



- debug: msg="hostname {{ ansible_hostname }}," #"

# TODO - service file - probabaly have an issue - forking from root to changing permissions.
# when user does't exist.

- apt: name=openvpn
- apt: name=easy-rsa

# allow a client to rsync it's client config
- apt: name=rsync
# to monitor connections
- apt: name=netstat-nat

- apt: name=iptables-persistent
- apt: name=netcat-traditional


##############################################
# Step 4: Build the Certificate Authority

# initialize
- command: make-cadir openvpn-ca
  args:
    chdir:  /root
    creates: openvpn-ca/vars

# can edit vars file here, for proper CA
# ./openvpn-ca/vars


# https://unix.stackexchange.com/questions/92005/key-config-pointing-to-the-wrong-version-of-openssl-cnf
# ln -s openssl-1.0.0.cnf openssl.cnf
- file: src=/root/openvpn-ca/openssl-1.0.0.cnf dest=/root/openvpn-ca/openssl.cnf  state=link

# export KEY_NAME="server"


- copy:
    dest: "/root/create-server.sh"
    mode: 0755
    content: |
      # deployed by ansible!
      set -e

      pushd /root/openvpn-ca

      # clean
      rm -rf keys && mkdir keys

      # initialize
      source vars && ./clean-all && ./pkitool --initca

      # missing 'index.txt.attr' is 'harmless',
      # https://github.com/OpenVPN/easy-rsa/issues/138
      # creates: keys/server.key
      source vars && ./pkitool --server server

      # diffie hellman for key exchange
      # NOte, may take a couple of minutes
      # build-dh is not interactive
      # creates: keys/dh2048.pem
      source vars  && ./build-dh

      # HMAC signature to strengthen the server's TLS integrity verification capabilities:
      # creates:  keys/ta.key
      openvpn --genkey --secret keys/ta.key

      # now copy keys out to create a clean working dir
      rm -rf keys.cpy
      mv keys keys.cpy

      popd

  tags: whoot


- command: 'bash -c /root/create-server.sh'
  args:
    creates: /root/openvpn-ca/keys.cpy/ca.crt



##############################################
# Step 7: Configure the OpenVPN Service

- command: "cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn"
  args:
    chdir:  /root/openvpn-ca/keys.cpy

# TODO needs a notify if create-server.sh ran
# ok this is problematic fo- we have to run it... if the script ran
#    creates: /etc/openvpn/ta.key

# and then need to restart openvpn server?




# To filter active config, use
# grep '^[^;#]' ./roles/admin/openvpn/templates/server.conf.j2

- template: src=server.conf.j2 dest=/etc/openvpn/server.conf


# CCD client configuration directory
- file: path=/etc/openvpn/ccd state=directory

# allow network 192.168.0.0/16 to be visible
- copy:
    dest: /etc/openvpn/ccd/client1
    content: |
      # deployed by ansible

      iroute 192.168.0.0 255.255.0.0



##############################################
# Step 8: Adjust the Server Networking Configuration

# ip forwarding - done in play


# Warning, be careful of earlier playbook errors, meaning the handler won't get called
# and nothing works

- copy:
    dest: /etc/iptables-rules
    content: |
      # deployed by ansible
      iptables -t nat --flush

      # do gateway nat for openvpn clients,
      iptables -t nat -A POSTROUTING -s '10.8.0.0/8' -o eth0 -j MASQUERADE
      # iptables -t nat -A POSTROUTING -j MASQUERADE


      # this is a bit tricky, we need to know the client ip, to set up the forward
      # port forwards to a client
      # monero p2p
      #iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 18080 -j DNAT --to 10.8.0.6

      # parity p2p and udp node discovery
      #iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 30303 -j DNAT --to 10.8.0.22
      #iptables -t nat -A PREROUTING -p udp -i eth0 --dport 30303 -j DNAT --to 10.8.0.22

      # transmission/bittorrent p2p
      #iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 51413 -j DNAT --to 10.8.0.18

      # grin p2p, and send/receive api
      #iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 13414 -j DNAT --to 10.8.0.10
      #iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 13415 -j DNAT --to 10.8.0.10

  notify: reconfigure-iptables
  tags: iptables


# STARTING SERVER
# Notes,
# start manually
# /usr/sbin/openvpn --cd /etc/openvpn --config /etc/openvpn/server.conf
# check
# ip addr show tun0


# start and enable

- service: name=openvpn state=restarted enabled=yes
  tags: restart

- service: name=openvpn@server state=restarted enabled=yes
  tags: restart



##############################################
# CLIENT

# important - for bundling tgz, the openvpn client binary expects the client conf file name
# to be client.conf - not eg. client02.conf.



# write client template
- template: src=client.conf.j2 dest=/root/client.conf
  vars:
  - {   server_name: "{{ ansible_hostname }}" }
  tags: whoot



- copy:
    dest: "/root/create-clients.sh"
    mode: 0755
    content: |
      #!/bin/bash -e
      # deployed by ansible!

      # note that we expect to have keys in keys.cpy
      k=/root/openvpn-ca/keys
      kcpy=/root//openvpn-ca/keys.cpy

      rm -rf /root/clients && mkdir /root/clients

      make_client() {
              # clear working dir
              rm -rf $k
              # copy original generated files into working dir
              cp -rp $kcpy $k

              # run script to generate client
              # NOTE. pkitool expects openvpn-ca/keys which is why we do all the shuffling
              pushd   /root/openvpn-ca
              source  ./vars && ./pkitool client
              popd

              # copy files essential for config out
              rm -rf /root/client && mkdir client
              cp $k/ca.crt $k/client.crt $k/client.key /root/client.conf $kcpy/ta.key client

              # generate .tgz
              rm -f /root/client.tgz
              tar czf /root/client.tgz -C /root client

              # rename
              mv /root/client.tgz  /root/clients/client${1}.tgz
      }

      make_client 01
      make_client 02
      make_client 03

  tags: whoot


- command: 'bash -c /root/create-clients.sh'
  args:
    creates: /root/clients/client01.tgz




#######
# CLIENT SETUP/Start

# COPY back to localhost with,
# rsync root@vpn:/root/clients/client03.tgz .

# apt-get install openvpn  - maybe openvpnclient

# cd /etc/openvpn/
# rm * -rf
# tar xf /home/meteo/client03.tgz
# maybe edit client.conf to set the remote server ip, but should use /etc/hosts.


# start is two-step
# systemctl start openvpn
# systemctl start openvpn@client


# edit /etc/resolv.conf to prevent dns leaking

# openvpn pushes specific default route 10.0.0.0/1 and 128.0.0.0/1 to take precedence
# must still have ordinary default root, which is used to work out conn to openvpn server

# we need ordinary dhcp to push a default route for localnet
# ip route add 192.168.0.0/16 via 192.168.201.1



# TROUBLE SHOOTING

# check client
# wget http://www.google.com

# check server logs, then client
# less /var/log/syslog

# check server connectivity and open ports
# nc -v -v vpn 443

# check server foreward
# sysctl net.ipv4.ip_forward

# check server nat
# eg. iptables -L -t nat

# from client, check can ping the vpn node.
# ping 10.8.0.1

# check can ssh to server,
# ssh 10.8.0.1



############################
# old

# SO we need to assemble a bundle with the keys for the client to use.
# we'll do it in /etc/openvpn/clients

# TODO the client1 key generation might be moved here,

##############################################
# Step 6: Generate a Client Certificate and Key Pair

# for client keys - eg. not password protected
# see ./build-key
#  - command: "bash -c 'source vars && ./pkitool client1 ' "
#    args:
#      chdir:  /root/openvpn-ca
#      creates: keys/client1.key
#
#
#  - file: path=/etc/openvpn/clients  state=directory
#
#  - template: src=client.conf.j2 dest=/etc/openvpn/clients/client.conf
#
#  - command: "tar cJf /etc/openvpn/clients/client1.tgz -C /root/openvpn-ca/keys/  ca.crt client1.crt client1.key ta.key -C /etc/openvpn/clients/ client.conf"
#    args:
#      creates: /etc/openvpn/clients/client1.tgz
#






