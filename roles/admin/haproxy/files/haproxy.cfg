# deployed by ansible!

# WARNING - DO NOT CHECKIN. FILE HAS stats pass 

global
  log /dev/log  local0
  log /dev/log  local1 notice
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin
  stats timeout 30s 
  user haproxy
  group haproxy
  daemon

  # Default SSL material locations
  # ca-base /etc/ssl/certs
  # crt-base /etc/ssl/private

  # Default ciphers to use on SSL-enabled listening sockets.
  # For more information, see ciphers(1SSL). This list is from:
  #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
  # An alternative list with additional directives can be obtained from
  #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
  ssl-default-bind-options no-sslv3

defaults
  log global
  mode  http
  option  httplog
  option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http


# need to bounce 80 -> 443

frontend http-in
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/haproxy.pem 
    mode http
    # default_backend nodes

    # Define hosts
    acl host_isafeature      hdr(host) -i isafeature.com
    acl host_peer_isafeature hdr(host) -i peer.isafeature.com

    ## figure out which one to use
    use_backend nodes      if host_isafeature
    use_backend peer_nodes if host_peer_isafeature


    http-request redirect code 302 location http://isafeature.com%[capture.req.uri] if { hdr_reg(host) -i 167.99.66.169 }
    http-request redirect code 302 location http://isafeature.com%[capture.req.uri] if { hdr_reg(host) -i ^www.isafeature.com }


    # https://www.datadoghq.com/blog/how-to-collect-haproxy-metrics/
    stats enable                            # Enable stats PAGE
    stats realm Haproxy\ Statistics         # Title text for popup window
    stats uri /stats                        # Stats URI
    stats auth haproxy:{{pass}}             # Username:Password  # Authenticat


backend peer_nodes
    mode http
  
    option forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    balance roundrobin
    cookie SERVERID insert indirect nocache
    server s1 127.0.0.1:3010 check cookie s1



backend nodes
    mode http
  
    # https://www.haproxy.com/blog/load-balancing-affinity-persistence-sticky-sessions-what-you-need-to-know/
    # balance roundrobin    # just roundrobbin requests

    # affinity within HAProxy, based on client IP information.  
    # note. won't distinguish nat, but will balance. but probem if ip changes during session
    # balance source
    # hash-type consistent # optional

    option forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    # server devel03 10.3.0.15:3000 check 
    # server devel05 10.3.0.18:3000 check 

    # haproxy cookie injection
    # tells HAProxy to setup a cookie called SERVERID only if the user did not come with such cookie.
    # NOTE. haproxy hides and will *not* forward the cookie to the node. so we won't see it in node http headers
    balance roundrobin
    cookie SERVERID insert indirect nocache
    #server s1 10.3.0.15:3000 check cookie s1 
    #server s2 10.3.0.18:3000 check cookie s2 
    server s1 127.0.0.1:3000 check cookie s1 


