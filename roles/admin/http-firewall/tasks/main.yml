
# basic example, for standalone server

  # may need to restart wlan0 here? at least when install dnsmasq
- apt: name=iptables-persistent
- apt: name=m4
  tags: iptables


- copy:
    dest: /etc/includes.m4
    content: |
      # deployed by ansible!

      # ingress or egress indicates which node inititated the connection
      # WAN_IN (proto, port, address)
      define(`WAN_IN_ACCEPT',
      `iptables -A INPUT  -i WAN_INTERFACE --protocol $1 --dport $2 --source $3      -j ACCEPT'
      `iptables -A OUTPUT -o WAN_INTERFACE --protocol $1 --sport $2 --destination $3 -j ACCEPT' )

      define(`WAN_IN_DROP',
      `iptables -A INPUT  -i WAN_INTERFACE --protocol $1 --dport $2 --source $3      -j DROP'
      `iptables -A OUTPUT -o WAN_INTERFACE --protocol $1 --sport $2 --destination $3 -j DROP' )


      # WAN_OUT_ACCEPT (proto, port, address)
      define(`WAN_OUT_ACCEPT',
      `iptables -A OUTPUT -o WAN_INTERFACE --protocol $1 --dport $2 --destination $3 -j ACCEPT'
      `iptables -A INPUT  -i WAN_INTERFACE --protocol $1 --sport $2 --source $3      -j ACCEPT' )

      # INT_ACCEPT(ifce, tcp) allow all protocols over an interface - eg. for lo, admin
      define(`INT_ACCEPT',
      `iptables -A OUTPUT -o $1 --protocol $2 -j ACCEPT'
      `iptables -A INPUT  -i $1 --protocol $2 -j ACCEPT' )

      define(`LOCAL_PORT_FORWARD',
      `iptables -t nat -A PREROUTING --protocol $1 --dport $2                  -j REDIRECT --to-ports $3'
      `iptables -t nat -A OUTPUT     --protocol $1 --dport $2  -d 127.0.0.0/16 -j REDIRECT --to-ports $3' )

      define(`FORWARD_ACCEPT',
      `iptables -A FORWARD --protocol $1 --dport $2 -s $3 -d $4 -j ACCEPT'
      `iptables -A FORWARD --protocol $1 --sport $2 -d $3 -s $4 -j ACCEPT' )

      # FORWARD_DROP(proto, port, src(egress), dst)
      define(`FORWARD_DROP',
      `iptables -A FORWARD --protocol $1 --dport $2 -s $3 -d $4 -j DROP'
      `iptables -A FORWARD --protocol $1 --sport $2 -d $3 -s $4 -j DROP')

  tags: iptables




- copy:
    dest: /etc/iptables-rules.m4
    content: |
      # deployed by ansible!

      define(`WAN_INTERFACE', `eth0')

      include(`/etc/includes.m4')


      ####################

      # flush current chain rules
      iptables -t filter  --flush
      iptables -t nat     --flush
      iptables -t mangle  --flush

      # set initial policy to accept
      iptables -P INPUT   ACCEPT
      iptables -P OUTPUT  ACCEPT
      iptables -P FORWARD ACCEPT


      # lo / 127.0.0.1
      # allow local processes to talk via lo. needed for rndc /port 953, needed for bind
      INT_ACCEPT(lo,     all)
      INT_ACCEPT(eth1,   all)
      INT_ACCEPT(eth0:2, all)


      # egress
      # dhcp TODO port 68 also...
      WAN_OUT_ACCEPT(udp, 67, 0.0.0.0/0)
      # dns
      WAN_OUT_ACCEPT(tcp, 53, 0.0.0.0/0)
      WAN_OUT_ACCEPT(udp, 53, 0.0.0.0/0)
      # http - needed for apt updates
      WAN_OUT_ACCEPT(tcp, 80, 0.0.0.0/0)
      WAN_OUT_ACCEPT(tcp, 443, 0.0.0.0/0)
      # ntp
      WAN_OUT_ACCEPT(udp, 123, 0.0.0.0/0)


      # ingress
      WAN_IN_ACCEPT(tcp, 22, 0.0.0.0/0)
      # WAN_IN_ACCEPT(tcp, 80, 0.0.0.0/0)
      # WAN_IN_ACCEPT(tcp, 443, 0.0.0.0/0)

      ####################################


      # LOCAL_PORT_FORWARD(tcp, 80, 3000)

      WAN_IN_DROP( tcp, 80, 147.135.36.28)     # drop incoming from notabug.io
      WAN_IN_DROP( tcp, 80, 104.31.84.143)     # drop incoming from redguardsaustin.com   / this is cloudfare, not the actual node...
      WAN_IN_DROP( tcp, 80, 104.31.85.143)     # drop incoming from redguardsaustin.com 

      WAN_IN_ACCEPT( tcp, 80, 0.0.0.0/0)         # anyone else ok




      # ok - so it spikes 100% only when someone does a page. load.... which is ok.
      # when not subscribed to any peers - but allow incoming peers to subscribe to me - then load is continuous .... 
      # NOTE we support outgoing conns by default --- over 80.


      # everything ok? change policies back to drop
      iptables -P INPUT   DROP
      iptables -P OUTPUT  DROP
      # iptables -P FORWARD DROP

  
  # TODO - instead of running this later. should run reconfigure immediately after using a variable
  notify: reconfigure-iptables
  tags: iptables


