

  - apt: name=m4
    tags: iptables


  # ok need to factor this ut....
  - copy:
      dest: /etc/iptables-macros.m4
      content: |
        # the action ACCEPT or DROP can be passed as argument $4.
        # the interface should probably also be passed as argument. we need the -i and -o to be explicit . or
        # no - because we have to define the LAN as ! of WAN to account for all other interraces
        # WAN_INGRESS
        # WAN_OUTGRESS
        # then we don't have to define it.
        # we can also
        # deployed by ansible!
        # WAN_IN_ACCEPT(proto, port, address)
        define(`WAN_IN_ACCEPT',
        `iptables -A INPUT  -i WAN_INTERFACE --protocol $1 --dport $2 --source $3      -j ACCEPT'
        `iptables -A OUTPUT -o WAN_INTERFACE --protocol $1 --sport $2 --destination $3 -j ACCEPT' )

        define(`WAN_IN_DROP',
        `iptables -A INPUT  -i WAN_INTERFACE --protocol $1 --dport $2 --source $3      -j DROP'
        `iptables -A OUTPUT -o WAN_INTERFACE --protocol $1 --sport $2 --destination $3 -j DROP' )


        # WAN_OUT_ACCEPT( proto, port, address)
        define(`WAN_OUT_ACCEPT',
        `iptables -A OUTPUT -o WAN_INTERFACE --protocol $1 --dport $2 --destination $3 -j ACCEPT'
        `iptables -A INPUT  -i WAN_INTERFACE --protocol $1 --sport $2 --source $3      -j ACCEPT' )

        # LAN_IN_ACCEPT( proto, port, address)
        define(`LAN_IN_ACCEPT',
        `iptables -A INPUT  ! -i WAN_INTERFACE --protocol $1 --dport $2 --source $3      -j ACCEPT'
        `iptables -A OUTPUT ! -o WAN_INTERFACE --protocol $1 --sport $2 --destination $3 -j ACCEPT' )

        # LAN_OUT_ACCEPT(proto, port, address)
        define(`LAN_OUT_ACCEPT',
        `iptables -A OUTPUT ! -o WAN_INTERFACE --protocol $1 --dport $2 --destination $3 -j ACCEPT'
        `iptables -A INPUT  ! -i WAN_INTERFACE --protocol $1 --sport $2 --source $3      -j ACCEPT' )

        # stateful contract...
        # FORWARD_ proto, port, src(egress), dst
        # define(`FORWARD_',
        # `iptables -A FORWARD --protocol $1 --dport $2 -s $3 -d $4 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT'
        # `iptables -A FORWARD --protocol $1 --sport $2 -d $3 -s $4 -m conntrack --ctstate ESTABLISHED -j ACCEPT' )

        # FORWARD_ proto, port, src(egress), dst
        define(`FORWARD_ACCEPT',
        `iptables -A FORWARD --protocol $1 --dport $2 -s $3 -d $4 -j ACCEPT'
        `iptables -A FORWARD --protocol $1 --sport $2 -d $3 -s $4 -j ACCEPT' )

        # FORWARD_DROP( proto, port, src(out), dst)
        define(`FORWARD_DROP',
        `iptables -A FORWARD --protocol $1 --dport $2 -s $3 -d $4 -j DROP'
        `iptables -A FORWARD --protocol $1 --sport $2 -d $3 -s $4 -j DROP')


        # INT_ACCEPT(ifce, protocol) allow easily specifying all protocols over an interface - eg. for lo, admin
        # should probably still specify ACCEPT
        define(`INT_ACCEPT',
        `iptables -A OUTPUT -o $1 --protocol $2 -j ACCEPT'
        `iptables -A INPUT  -i $1 --protocol $2 -j ACCEPT' )

        # ping
        define(`WAN_OUT_PING_ACCEPT',
        `iptables -A OUTPUT -o WAN_INTERFACE -p icmp --icmp-type 8  --destination $1 -j ACCEPT'
        `iptables -A INPUT  -i WAN_INTERFACE -p icmp --icmp-type 0  --source $1      -j ACCEPT')

        define(`LAN_IN_PING_ACCEPT',
        `iptables -A OUTPUT ! -o WAN_INTERFACE -p icmp --icmp-type 0 --destination $1 -j ACCEPT'
        `iptables -A INPUT  ! -i WAN_INTERFACE -p icmp --icmp-type 8 --source $1      -j ACCEPT')

        define(`LAN_OUT_PING_ACCEPT',
        `iptables -A OUTPUT ! -o WAN_INTERFACE -p icmp --icmp-type 8  --destination $1 -j ACCEPT'
        `iptables -A INPUT  ! -i WAN_INTERFACE -p icmp --icmp-type 0  --source $1      -j ACCEPT')

        # (src, dst)
        define(`FORWARD_PING_ACCEPT',
        `iptables -A FORWARD -p icmp --icmp-type 8 --source $1 --destination $2 -j ACCEPT'
        `iptables -A FORWARD -p icmp --icmp-type 0 --source $2 --destination $1 -j ACCEPT')




  - copy:
      dest: /etc/iptables-macros2.m4
      content: |
        # deployed by ansible!

        # there's no advantage passing interface as an argument - because we must define the LAN as ! of WAN as a catchall interface
        # wan andd lan are exactually the same - except lan has !.


        # WAN_INGRESS(proto, port, address, action)
        define(`WAN_INGRESS',
        `iptables -A INPUT  -i WAN_INTERFACE --protocol $1 --dport $2 --source $3      -j $4'
        `iptables -A OUTPUT -o WAN_INTERFACE --protocol $1 --sport $2 --destination $3 -j $4' )

        define(`WAN_EGRESS',
        `iptables -A OUTPUT -o WAN_INTERFACE --protocol $1 --dport $2 --destination $3 -j $4'
        `iptables -A INPUT  -i WAN_INTERFACE --protocol $1 --sport $2 --source $3      -j $4' )


        define(`LAN_INGRESS',
        `iptables -A INPUT  ! -i WAN_INTERFACE --protocol $1 --dport $2 --source $3      -j $4'
        `iptables -A OUTPUT ! -o WAN_INTERFACE --protocol $1 --sport $2 --destination $3 -j $4' )

        define(`LAN_EGRESS',
        `iptables -A OUTPUT ! -o WAN_INTERFACE --protocol $1 --dport $2 --destination $3 -j $4'
        `iptables -A INPUT  ! -i WAN_INTERFACE --protocol $1 --sport $2 --source $3      -j $4' )


        # icmp does not support a range type so we can't overload with --icmp-type 1:255 to drop everything
        # instead need a separate rule
        #define(`WAN_ICMP_INGRESS',
        #`iptables -A INPUT  -i WAN_INTERFACE -p icmp --icmp-type $1 --source $2      -j $3'
        #`iptables -A OUTPUT -o WAN_INTERFACE -p icmp --icmp-type $2 --destination $2 -j $3')


        # this applies to either ingress or egress icmp... because it's not selective for ports like ip
        # WAN_ICMP(address, action)
        define(`WAN_ICMP',
        `iptables -A INPUT  -i WAN_INTERFACE -p icmp  --source $1      -j $2'
        `iptables -A OUTPUT -o WAN_INTERFACE -p icmp  --destination $1 -j $2')

        define(`WAN_PING_INGRESS',
        `iptables -A INPUT  -i WAN_INTERFACE -p icmp --icmp-type 8  --source $1      -j $2'
        `iptables -A OUTPUT -o WAN_INTERFACE -p icmp --icmp-type 0  --destination $1 -j $2')

        define(`WAN_PING_EGRESS',
        `iptables -A OUTPUT -o WAN_INTERFACE -p icmp --icmp-type 8  --destination $1 -j $2'
        `iptables -A INPUT  -i WAN_INTERFACE -p icmp --icmp-type 0  --source $1      -j $2')




