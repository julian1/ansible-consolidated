
# generic iptables starting point
# useful
# iptables -t filter -L -v -n
# netstat -tnp | grep 443


  - apt: name=iptables-persistent

  - copy:
      dest: /etc/iptables-rules.m4
      content: |
        # deployed by ansible!

        #####
        # flush current chain rules and setup
        iptables -t filter --flush
        iptables -t nat    --flush

        define(`WAN_INTERFACE', `eth0')

        include(`/etc/iptables-macros2.m4')

        #####

        WAN_INGRESS(tcp,  22,   0.0.0.0/0,      ACCEPT)

        # ok this works!!
        # none of it works - accept doesn't remove from prerouting. it still goes to the other rule...
        # and the ! predicate isn't tested before dnat rule is handled
        iptables -t nat -A PREROUTING -p tcp --dport 443 --source 61.144.0.0/16 -j ACCEPT        # drop packet out of pre-routing
        iptables -t nat -A PREROUTING -p tcp --dport 443 --source 121.34.0.0/16 -j ACCEPT        # drop packet out of pre-routing

        #iptables -t nat -A PREROUTING -p tcp --dport 443                        -j DNAT --to-destination 151.101.65.67:443   # redirect
        iptables -t nat -A PREROUTING -p tcp --dport 443 ! --source 61.144.0.0/16  -j DNAT --to-destination 151.101.65.67:443   # redirect

        iptables -t nat -A POSTROUTING -j MASQUERADE


        WAN_INGRESS(tcp,  443,  0.0.0.0/0,  ACCEPT)   # hotel wifi  61.144.184.147


        WAN_EGRESS(tcp,  53,    0.0.0.0/0,      ACCEPT)
        WAN_EGRESS(udp,  53,    0.0.0.0/0,      ACCEPT)
        WAN_EGRESS(tcp,  80,    0.0.0.0/0,      ACCEPT)
        WAN_EGRESS(tcp,  443,   0.0.0.0/0,      ACCEPT)
        WAN_EGRESS(udp,  123,   0.0.0.0/0,      ACCEPT)
        # cloud instances have static ips and do not need dhcp udp 67 and 68



    # TODO - instead of running this later. should run reconfigure immediately after using a variable
    notify: reconfigure-iptables
    tags: iptables2





#iptables -A INPUT  -i eth0 --protocol tcp --dport 443 --source 0.0.0.0/0      -j LOG --tcp-flags FIN,SYN,RST,ACK

#WAN_INGRESS(tcp,  443,  61.144.0.0/16,  ACCEPT)   # hotel wifi  61.144.184.147
## WAN_INGRESS(tcp,  443,  121.34.0.0/16,  ACCEPT)   # 121.34.50.13
#                                                    # 23.248.219.90    syn conn attempt
#WAN_INGRESS(tcp,  443,  112.97.0.0/16,  ACCEPT)   # mobile   112.97.57.208,  112.97.56.154:22212
#WAN_INGRESS(tcp,  443,  0.0.0.0/0,      LOG)
#WAN_INGRESS(tcp,  443,  0.0.0.0/0,      DROP)


# an alternativeto specifying a chain policy
# we still need to carve out required egress services - eg. dns, ntp, http for apt etc. because of src address
# but it should leave icmp alone
#WAN_INGRESS(tcp, 0:65535, 0.0.0.0/0,  DROP)
#WAN_INGRESS(udp, 0:65535, 0.0.0.0/0,  DROP)


# should not blanket block icmp, http://shouldiblockicmp.com/
#WAN_PING_INGRESS(0.0.0.0/0, ACCEPT)
#WAN_PING_EGRESS( 0.0.0.0/0, ACCEPT)
#WAN_ICMP(        0.0.0.0/0, DROP)


#iptables -t nat -A PREROUTING -p tcp --dport 443 --source ! 61.144.0.0/16  -j DNAT --to-destination 151.101.65.67:443   # produces tls error

# these rules are correctly redirecting, but redirecting everything when not desired
#iptables -t nat -A PREROUTING -p tcp --dport 443  -j DNAT --to-destination 151.101.65.67:443    # this works and hits https ... certificates owner does not match
#iptables -t nat -A PREROUTING -p tcp --dport 443 --source ! 61.144.0.0/16  -j DNAT --to-destination 151.101.65.67:443   # this also works.  The certificate's owner does not match
# iptables -t nat -A PREROUTING -p tcp --dport 443 ! --source 61.144.0.0/16  -j DNAT --to-destination 151.101.65.67:443   # this also works.  The certificate's owner does not match
# iptables -t nat -A PREROUTING -p tcp --dport 443 ! --source 61.144.0.0/16 ! --source 112.97.0.0/16  -j DNAT --to-destination 151.101.65.67:443  # this doesn't work. just hangs
# iptables -t nat -A PREROUTING -p tcp --dport 443 ! --source 61.144.0.0/16 ! --source 112.97.0.0/16  -j DNAT --to-destination 151.101.65.67:443  # untested
# iptables -t nat -A PREROUTING -p tcp --dport 443 ! --source 61.144.0.0/16,112.97.0.0/16  -j DNAT --to-destination 151.101.65.67:443  # this doesn't work.

# ACCEPT in PREROUTING causes packets to fall out of the chain,
# https://serverfault.com/questions/829669/iptables-dont-redirect-specific-ip/829672
# accept it doesn't work. they get redirected by the last prerouting rule...
#iptables -t nat -A PREROUTING -p tcp --dport 443 --source 61.144.0.0/16 -j ACCEPT
#iptables -t nat -A PREROUTING -p tcp --dport 443 --source 61.144.0.0/16 -j REDIRECT --to-destination 127.0.0.1:443
#iptables -t nat -A PREROUTING -p tcp --dport 443 --source 112.97.0.0/16 -j REDIRECT --to-destination 127.0.0.1:443
#iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination 151.101.65.67:443
# redirect all https traffic to an https webserver

# we should try just using a prerouting accept rule for what we want. then to destination with DNAT

# the exception clause here does work. but the redirect isn't quite right
# fucking hell. seems impossible to discriminate based on the source ip  - everything gets redicrected or everything is not redirected


